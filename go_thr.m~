setup() ;
% setup('useGpu', true); % Uncomment to initialise with a GPU support
clc;
%% Part 3.1: Prepare the data

% Load a database of blurred images to train from
imdb = load('data/text_imdb.mat') ;

replace_images = true;

if replace_images
    load('data/thr_gt.mat');

    train_num = 300;
    test_num = 130;

    imdb.images.id = 1:train_num+test_num;
    imdb.images.set = [ones(1, train_num), 2*ones(1, test_num)];

    images = data.patches(1:train_num+test_num, :, :);
    labels = data.labels(1:train_num+test_num);

    imdb.images.data = single(permute(images, [2, 3, 4, 1]));
    imdb.images.labels = single(permute(labels, [2, 1]));
end


% run(fullfile(fileparts(mfilename('fullpath')),...
%   '..', '..', 'matlab', 'vl_setupnn.m')) ;

opts.batchNormalization = false ;
opts.networkType = 'simplenn' ;
[opts, varargin] = vl_argparse(opts, varargin) ;

sfx = opts.networkType ;
if opts.batchNormalization, sfx = [sfx '-bnorm'] ; end
opts.expDir = fullfile(vl_rootnn, 'data', ['mnist-baseline' sfx]) ;
[opts, varargin] = vl_argparse(opts, varargin) ;

opts.dataDir = fullfile(vl_rootnn, 'data', 'mnist') ;
opts.imdbPath = fullfile(opts.expDir, 'imdb.mat');
opts.train = struct() ;
opts = vl_argparse(opts, varargin) ;
if ~isfield(opts.train, 'gpus'), opts.train.gpus = []; end;

% --------------------------------------------------------------------
%                                                         Prepare data
% --------------------------------------------------------------------

net = cnn_mnist_init('batchNormalization', opts.batchNormalization, ...
                     'networkType', opts.networkType) ;

% if exist(opts.imdbPath, 'file')
%   imdb = load(opts.imdbPath) ;
% else
%   imdb = getMnistImdb(opts) ;
%   mkdir(opts.expDir) ;
%   save(opts.imdbPath, '-struct', 'imdb') ;
% end

net.meta.classes.name = arrayfun(@(x)sprintf('%d',x),1:255,'UniformOutput',false) ;

% --------------------------------------------------------------------
%                                                                Train
% --------------------------------------------------------------------

switch opts.networkType
  case 'simplenn', trainfn = @cnn_train ;
  case 'dagnn', trainfn = @cnn_train_dag ;
end

[net, info] = trainfn(net, imdb, getBatch(opts), ...
  'expDir', opts.expDir, ...
  net.meta.trainOpts, ...
  opts.train, ...
  'val', find(imdb.images.set == 3)) ;
end

% --------------------------------------------------------------------
function fn = getBatch(opts)
% --------------------------------------------------------------------
switch lower(opts.networkType)
  case 'simplenn'
    fn = @(x,y) getSimpleNNBatch(x,y) ;
  case 'dagnn'
    bopts = struct('numGpus', numel(opts.train.gpus)) ;
    fn = @(x,y) getDagNNBatch(bopts,x,y) ;
end
end

% --------------------------------------------------------------------
function [images, labels] = getSimpleNNBatch(imdb, batch)
% --------------------------------------------------------------------
images = imdb.images.data(:,:,:,batch) ;
% size(imdb.images.labels)
labels = imdb.images.labels(1,batch) ;
end
% --------------------------------------------------------------------
function inputs = getDagNNBatch(opts, imdb, batch)
% --------------------------------------------------------------------
images = imdb.images.data(:,:,:,batch) ;
labels = imdb.images.labels(1,batch) ;
if opts.numGpus > 0
  images = gpuArray(images) ;
end
inputs = {'input', images, 'label', labels} ;
end
% --------------------------------------------------------------------
function imdb = getMnistImdb(opts)
% --------------------------------------------------------------------
% Preapre the imdb structure, returns image data with mean image subtracted
files = {'train-images-idx3-ubyte', ...
         'train-labels-idx1-ubyte', ...
         't10k-images-idx3-ubyte', ...
         't10k-labels-idx1-ubyte'} ;

if ~exist(opts.dataDir, 'dir')
  mkdir(opts.dataDir) ;
end

for i=1:4
  if ~exist(fullfile(opts.dataDir, files{i}), 'file')
    url = sprintf('http://yann.lecun.com/exdb/mnist/%s.gz',files{i}) ;
    fprintf('downloading %s\n', url) ;
    gunzip(url, opts.dataDir) ;
  end
end

f=fopen(fullfile(opts.dataDir, 'train-images-idx3-ubyte'),'r') ;
x1=fread(f,inf,'uint8');
fclose(f) ;
x1=permute(reshape(x1(17:end),28,28,60e3),[2 1 3]) ;

f=fopen(fullfile(opts.dataDir, 't10k-images-idx3-ubyte'),'r') ;
x2=fread(f,inf,'uint8');
fclose(f) ;
x2=permute(reshape(x2(17:end),28,28,10e3),[2 1 3]) ;

f=fopen(fullfile(opts.dataDir, 'train-labels-idx1-ubyte'),'r') ;
y1=fread(f,inf,'uint8');
fclose(f) ;
y1=double(y1(9:end)')+1 ;

f=fopen(fullfile(opts.dataDir, 't10k-labels-idx1-ubyte'),'r') ;
y2=fread(f,inf,'uint8');
fclose(f) ;
y2=double(y2(9:end)')+1 ;

set = [ones(1,numel(y1)) 3*ones(1,numel(y2))];
data = single(reshape(cat(3, x1, x2),28,28,1,[]));
dataMean = mean(data(:,:,:,set == 1), 4);
data = bsxfun(@minus, data, dataMean) ;

imdb.images.data = data ;
imdb.images.data_mean = dataMean;
imdb.images.labels = cat(2, y1, y2) ;
imdb.images.set = set ;
imdb.meta.sets = {'train', 'val', 'test'} ;
imdb.meta.classes = arrayfun(@(x)sprintf('%d',x),0:9,'uniformoutput',false) ;
end

% % % Visualize the first image in the database
% % figure(31) ; set(gcf, 'name', 'Part 3.1: Data') ; clf ;
% % 
% % subplot(1,2,1) ; imagesc(imdb.images.data(:,:,:,1)) ;
% % axis off image ; title('Input (blurred)') ;
% % 
% % subplot(1,2,2) ; imagesc(imdb.images.label(:,:,:,1)) ;
% % axis off image ; title('Desired output (sharp)') ;
% % 
% % colormap gray ;
% 
% %% Part 3.2: Create a network architecture
% %
% % The expected input size (a single 64 x 64 x 1 image patch). This is
% % used for visualization purposes.
% 
% net = cnn_mnist_init() ;
% % net = initializeLargeCNN() ;
% 
% % Display network
% % vl_simplenn_display(net) ;
% 
% % Evaluate network on an image
% res = vl_simplenn(net, imdb.images.data(:,:,:,1)) ;
% 
% % figure(32) ; clf ; colormap gray ;
% % set(gcf,'name', 'Part 3.2: network input') ;
% % subplot(1,2,1) ;
% % imagesc(res(1).x) ; axis image off  ;
% % title('CNN input') ;
% % 
% % set(gcf,'name', 'Part 3.2: network output') ;
% % subplot(1,2,2) ;
% % imagesc(res(end).x) ; axis image off  ;
% % title('CNN output (not trained yet)') ;
% 
% %% Part 3.3: learn the model
% 
% % Add a loss (using a custom layer)
% net = addCustomLossLayer(net, @l2LossForward, @l2LossBackward) ;
% 
% % Extra: uncomment the following line to use your implementation
% % of the L1 loss
% %net = addCustomLossLayer(net, @l1LossForward, @l1LossBackward) ;
% 
% % Train
% trainOpts.expDir = 'data/text-small' ;
% trainOpts.gpus = [] ;
% % Uncomment for GPU training:
% %trainOpts.expDir = 'data/text-small-gpu' ; 
% %trainOpts.gpus = [1] ;
% trainOpts.batchSize = 16; %16 ;
% trainOpts.learningRate = 0.002 ;
% trainOpts.plotDiagnostics = false ;
% % trainOpts.plotDiagnostics = true ; % Uncomment to plot diagnostics
% trainOpts.numEpochs = 20 ;
% trainOpts.errorFunction = 'binary' ;
% 
% a = 1;
% 
% net = cnn_train(net, imdb, @getBatch, trainOpts) ;
% 
% % Deploy: remove loss
% net.layers(end) = [] ;
% 
% %% Part 3.4: evaluate the model
% 
% train = find(imdb.images.set == 1) ;
% val = find(imdb.images.set == 2) ;
% 
% % figure(33) ; set(gcf, 'name', 'Part 3.4: Results on the training set') ;
% % showDeblurringResult(net, imdb, train(1:30:151)) ;
% % 
% % figure(34) ; set(gcf, 'name', 'Part 3.4: Results on the validation set') ;
% % showDeblurringResult(net, imdb, val(1:30:151)) ;
% % 
% % figure(35) ;
% % set(gcf, 'name', 'Part 3.4: Larger example on the validation set') ;
% % colormap gray ;
% % subplot(1,2,1) ; imagesc(imdb.examples.blurred{1}, [-1, 0]) ;
% % axis image off ;
% % title('CNN input') ;
% % res = vl_simplenn(net, imdb.examples.blurred{1}) ;
% % subplot(1,2,2) ; imagesc(res(end).x, [-1, 0]) ;
% % axis image off ;
% % title('CNN output') ;
