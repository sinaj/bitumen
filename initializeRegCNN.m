function net = initializeRegCNN()

net.meta.inputSize = [64 64 1 1] ;

net.layers = { } ;

net.layers{end+1} = struct(...
  'name', 'conv1', ...
  'type', 'conv', ...
  'weights', {xavier(5,5,1,32)}, ...
  'pad', 0, ...
  'stride', 1, ...
  'learningRate', [1 1], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu1', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
   'name', 'pool1',...
   'type', 'pool', ...
   'method', 'max', ...
   'pool', [2 2], ...
   'stride', 2, ...
   'pad', 0) ;

net.layers{end+1} = struct(...
  'name', 'conv2', ...
  'type', 'conv', ...
  'weights', {xavier(5,5,32,32)}, ...
  'pad', 0, ...
  'stride', 1, ...
  'learningRate', [1 1], ...
  'weightDecay', [1 0]) ;

net.layers{end+1} = struct(...
  'name', 'relu2', ...
  'type', 'relu') ;

net.layers{end+1} = struct(...
   'name', 'pool1',...
   'type', 'pool', ...
   'method', 'max', ...
   'pool', [13 13], ...
   'stride', 13, ...
   'pad', 0) ;

net.layers{end+1} = struct(...
  'name', 'prediction', ...
  'type', 'conv', ...
  'weights', {xavier(2,2,32,1)}, ...
  'pad', 0, ...
  'stride', 1, ...
  'learningRate', [1 1], ...
  'weightDecay', [1 0]) ;

% Consolidate the network, fixing any missing option
% in the specification above

net = vl_simplenn_tidy(net) ;